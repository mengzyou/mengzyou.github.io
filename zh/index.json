[{"categories":["Kubernetes"],"contents":"K3S 是 Rancher 为物联网（IoT）和边缘计算环境开发的轻量级 Kubernetes 发行版本。相比原生的 Kubernetes，其移除了很多非必要的组件，例如云控制管理器（CCM）、内置的（In-Tree）的存储插件等，以及为ARM架构的基础设施做了优化。\nK3s 的轻量级同时也体现在其打包成一个二进制可执行文件进行分发，状态存储除了支持 etcd 外，还支持 Sqlite3、MySQl和Postgres。其跟多特性可参考官方文档。\nK3s 支持单节集群部署（可用于开发测试环境），也支持高可用的多节点集群。同时还可以通过 k3d 项目快速在本地开发环境使用Docker容器部署 k3s 集群作为开发环境。\n这里我将演示通过虚拟机部署一个高可用的多节点集群（3个Servers节点 + 3个Agent节点）。\nk3S架构 上图是来自k3s官网的架构图，其架构与Kubernetes的架构是相似的，k3s的server节点也就是控制面节点，agent节点是工作负载节点。k3s默认使用 containerd 作为容器运行时。\n更信息的部署架构可参考官方文档。\n准备虚拟机节点 这里我们将部署 3 + 3 的集群，需要6台虚拟机，基本配置如下\n主机名 IP vCPU 内存 homek3s-server1 192.168.0.150 1 2 GB homek3s-server2 192.168.0.151 1 2 GB homek3s-server3 192.168.0.152 1 2 GB homek3s-agent1 192.168.0.154 2 4 GB homek3s-agent2 192.168.0.155 2 4 GB homek3s-agent3 192.168.0.156 2 4 GB 部署的最小需求，可参考官方文档。\nK3s 支持大部分主流的Linux操作系统，这里我使用的是 openSUSE Leap Micro 15.2，其是一个基于openSUSE，为容器负载而设计的操作系统。\n为了部署简单，这里我们禁用了系统的防火墙，如果开启防火墙，需要为Server节点开放如下端口\n6443/TCP - Kubernetes API 服务 8472/UDP - Flannel VXLAN模式需要 51820/UDP - Flannel Wireguard后端需要 10250/TCP - Kubelet metrics需要 2379-2380/TCP - 基于内嵌etcd高可用部署模式需要 启动Server节点 首先登陆到第一个Server节点 homek3s-server1，然后下载最新版本（v1.24.3+k3s1）的 k3s 二进制文件\n# curl -sfL https://github.com/k3s-io/k3s/releases/download/v1.24.3%2Bk3s1/k3s -o /usr/local/bin/k3s # chmod +x k3s # k3s --version k3s version v1.24.3+k3s1 (990ba0e8) go version go1.18.1 k3s 支持一下几个子命令\nk3s server - 用于运行管理服务节点 k3s agent - 用于运行agent工作节点 k3s kubectl - 运行 kubectl 命令 k3s crictl - 运行 crictl 容器管理命令 其他的命令帮助，请通过 k3s --help 查看。\n这里我们将要创建一个使用内置etcd数据库的高可用集群，执行如下命令\n# k3s server --cluster-init --advertise-address=192.168.0.150 --tls-san=homek3s.mengz.lan --write-kubeconfig-mode=644 参数 \u0026ndash;cluster-init 是使用内置的etcd初始户一个新的集群;\n参数 \u0026ndash;advertise-address 是指定API服务器的监听IP地址，如果不指定，默认为节点的IP地址;\n参数 \u0026ndash;tls-san 是指定额外的域名或者IP地址作为TLS证书的SAN，使得我们从客户端可通过域名访问而API服务器。\n运行成功后，在 homek3s-server1 打开另一个终端执行\n# k3s kubectl get no NAME STATUS ROLES AGE VERSION homek3s-server1 Ready control-plane,etcd,master 27h v1.24.3+k3s1 可以看到，集群中以及运行了一个节点，不过这时k3s服务是启动在前台的，我们需要配置一个 systemd 服务，让其以服务形式运行。\n创建文件 /etc/systemd/system/k3s.service，内如如下\n[Unit] Description=Lightweight Kubernetes Documentation=https://k3s.io After=network-online.target Wants=network-online.target [Service] Type=notify EnvironmentFile=-/etc/default/%N EnvironmentFile=-/etc/sysconfig/%N EnvironmentFile=-/etc/systemd/system/k3s.service.env ExecStartPre=/bin/sh -xc \u0026#39;! /usr/bin/systemctl is-enabled --quiet nm-cloud-setup.service\u0026#39; ExecStart=/usr/local/bin/k3s server KillMode=process Delegate=yes # Having non-zero Limit*s causes performance problems due to accounting overhead # in the kernel. We recommend using cgroups to do container-local accounting. LimitNOFILE=1048576 LimitNPROC=infinity LimitCORE=infinity TasksMax=infinity TimeoutStartSec=0 Restart=always RestartSec=5s [Install] WantedBy=multi-user.target 终止刚才运行的k3s进程，然后执行\n# systemctl enable --now k3s.server # systemctl status k3s ● k3s.service - Lightweight Kubernetes Loaded: loaded (/etc/systemd/system/k3s.service; enabled; vendor preset: disabled) Active: active (running) since Fri 2022-07-22 03:31:21 CST; 18h ago Docs: https://k3s.io Process: 1121 ExecStartPre=/bin/sh -xc ! /usr/bin/systemctl is-enabled --quiet nm-cloud-setup.service (code=exited, status=0/SUCCESS) Main PID: 1129 (k3s-server) Tasks: 120 CGroup: /system.slice/k3s.service ... 这是后k3s进程将以服务的形式运行在后台了。\n执行完上述步骤后，k3s将会生产集群的管理员 kubeconfig 文件 - /etc/rancher/k3s/k3s.yaml，可将该文件拷贝的本地环境，修改 server 内容\nserver: https://127.0.0.1:6443 server: https://192.168.0.150:6443\n这样就可以在本地主机上使用 kubectl 访问集群了。\n接下来，我们将在其他Server节点上启动k3s，并作为管理节点加入集群，首先在第一个节点 homek3s-server1 上获取到集群的Token\n# cat /var/lib/rancher/k3s/server/node-token K1087c3ff53c94a3c3b20475e84602f1e6d46f1b3903f2979f144800990897b06ac::server:fb8e7aa7ba23d7652942b09cb440ba24 SSH登陆其他Server节点（homek3s-server2 和 homek3s-server3），执行如下步骤\n下载相同版本的 k3s 二进制文件到 /usr/local/bin/k3s\n执行如下命令加入集群\n# k3s server --server=https://192.168.0.150:6443 --token=${NODE_TOKEN} 其中 ${NODE_TOKEN} 是上面从第一个节点获取的 Token 内容。\n如第一个节点一样，配置 etc/systemd/system/k3s.service，将k3s进程启动以服务方式启动。 完成上述步骤后，通过 kubectl 查看节点\n❯ k get no NAME STATUS ROLES AGE VERSION homek3s-server1 Ready control-plane,etcd,master 28h v1.24.3+k3s1 homek3s-server2 Ready control-plane,etcd,master 27h v1.24.3+k3s1 homek3s-server3 Ready control-plane,etcd,master 27h v1.24.3+k3s1 启动Agent节点 在启动完3个管理节点（Server）的集群之后，我接下来继续添加工作节点（Agent）到集群中，登陆到3个Agent节点之下如下步骤（3个节点上的操作相同）\n下载相同版本的 k3s 二进制文件到 /usr/local/bin/k3s （方法与Server节点上一样）\n执行如下命令，以工作节点加入集群\n# k3s agent --server=https://192.168.0.150:6443 --token=${NODE_TOKEN} ${NODE_TOKEN} 是上面获取的节点Token值。\n执行成功之后，也需要将 k3s 的 agent 进程以服务方式启动，这里与Server节点有些不同，创建文件 /etc/systemd/system/k3s-agent.service，内容如下\n[Unit] Description=Lightweight Kubernetes Documentation=https://k3s.io After=network-online.target Wants=network-online.target [Service] Type=notify EnvironmentFile=-/etc/default/%N EnvironmentFile=-/etc/sysconfig/%N EnvironmentFile=-/etc/systemd/system/k3s-agent.service.env ExecStartPre=/bin/sh -xc \u0026#39;! /usr/bin/systemctl is-enabled --quiet nm-cloud-setup.service\u0026#39; ExecStart=/usr/local/bin/k3s agent --server=${K3S_URL} --token=${K3S_TOKEN} KillMode=process Delegate=yes # Having non-zero Limit*s causes performance problems due to accounting overhead # in the kernel. We recommend using cgroups to do container-local accounting. LimitNOFILE=1048576 LimitNPROC=infinity LimitCORE=infinity TasksMax=infinity TimeoutStartSec=0 Restart=always RestartSec=5s [Install] WantedBy=multi-user.target 然后再创建文件 /etc/systemd/system/k3s-agent.service.env，内容如下\nK3S_URL=\u0026#34;https://192.168.0.150:6443\u0026#34; K3S_TOKEN=\u0026#34;K1087c3ff58c94a3c3b20475e84602f8e6d46f1b3903f2979f144800990897b06ac::server:fb8e7aa7ba23d7652942b09cb440ba24\u0026#34; 注意，将以上的 K3S_TOKEN 替换成你的值。\n然后执行\n# sysetmctl enable --now k3s-agent.service 3个Agent节点都启动完成之后，使用 kubectl 查看节点\n❯ k get no NAME STATUS ROLES AGE VERSION homek3s-agent1 Ready \u0026lt;none\u0026gt; 27h v1.24.3+k3s1 homek3s-agent2 Ready \u0026lt;none\u0026gt; 26h v1.24.3+k3s1 homek3s-agent3 Ready \u0026lt;none\u0026gt; 26h v1.24.3+k3s1 homek3s-server1 Ready control-plane,etcd,master 28h v1.24.3+k3s1 homek3s-server2 Ready control-plane,etcd,master 27h v1.24.3+k3s1 homek3s-server3 Ready control-plane,etcd,master 27h v1.24.3+k3s1 可以看到，我们以及通过K3S部署了一个3+3的高可用Kubernetes集群。\n部署应用 成功启动一个K3S集群，除了Kubernetes必要的组件之外，还自动为集群部署以下组件\nFlennel作为CNI插件 rancher-local-path 作为默认的存储类插件 Traefik 作为 Ingress 控制器 kipper Load Balancer 作为服务的负载均均衡控制器 Traefik的Load Balancer类型的服务就直接通过每个节点的 80 和 443 端口暴露了\n❯ k get svc -n kube-system traefik LoadBalancer 10.43.66.163 192.168.0.150,192.168.0.151,192.168.0.152,192.168.0.154,192.168.0.155,192.168.0.156 80:30833/TCP,443:32747/TCP 28h 因此，我们可以直接创建应用，并通过Ingress向外暴露服务，这里我们创建一个简单的Web服务，也就是 Docker的教程，创建如下资源文件 docker-tour.yaml\n--- apiVersion: apps/v1 kind: Deployment metadata: labels: com.docker.project: tutorial name: tutorial spec: replicas: 1 selector: matchLabels: com.docker.project: tutorial strategy: type: Recreate template: metadata: labels: com.docker.project: tutorial spec: containers: - image: docker/getting-started name: tutorial ports: - containerPort: 80 protocol: TCP resources: {} restartPolicy: Always --- apiVersion: v1 kind: Service metadata: name: tutorial spec: ports: - name: 80-tcp port: 80 protocol: TCP targetPort: 80 selector: com.docker.project: tutorial type: ClusterIP --- apiVersion: networking.k8s.io/v1 kind: Ingress metadata: name: tutorial labels: com.docker.project: tutorial spec: # ingressClassName: contour rules: - host: \u0026#34;tour.homek3s.lan\u0026#34; http: paths: - pathType: Prefix path: \u0026#34;/\u0026#34; backend: service: name: tutorial port: number: 80 然后执行\n❯ kubectl apply -f docker-tour.yaml 在你的内部DNS服务器，或者 /etc/hosts 中配置域名解析，将 tour.homek3s.lan 解析到任何一个节点的IP地址，如\n192.168.0.150 tour.homek3s.lan 通过浏览器访问 https://tour.homek3s.lan/ ，将打开部署的应用。\n总结 这里演示了如果通过K3S部署一个高可用的Kubernetes集群，使用k3s内置etcd的方式作为入门，k3s还支持使用外部的数据存储以及其他更多的部署选项，可参考官方文档。K3s作为一个轻量级的kubernetes版本，以了单一的二进制文件 - k3s进行分发，可以快速部署开发测试，以及边缘生产级别的集群。\n后期将会继续探索另一款开源的轻量级Kubeernets版本 - K0S。\n","date":"July 22, 2022","hero":"/zh/posts/sre/k8s/lightweight-k3s/images/k3s-kubernetes.png","permalink":"/zh/posts/sre/k8s/lightweight-k3s/","summary":"K3S 是 Rancher 为物联网（IoT）和边缘计算环境开发的轻量级 Kubernetes 发行版本。相比原生的 Kubernetes，其移除了很多非必要的组件，例如云控制管理器（CCM）、内置的（In-Tree）的存储插件等，以及为ARM架构的基础设施做了优化。\nK3s 的轻量级同时也体现在其打包成一个二进制可执行文件进行分发，状态存储除了支持 etcd 外，还支持 Sqlite3、MySQl和Postgres。其跟多特性可参考官方文档。\nK3s 支持单节集群部署（可用于开发测试环境），也支持高可用的多节点集群。同时还可以通过 k3d 项目快速在本地开发环境使用Docker容器部署 k3s 集群作为开发环境。\n这里我将演示通过虚拟机部署一个高可用的多节点集群（3个Servers节点 + 3个Agent节点）。\nk3S架构 上图是来自k3s官网的架构图，其架构与Kubernetes的架构是相似的，k3s的server节点也就是控制面节点，agent节点是工作负载节点。k3s默认使用 containerd 作为容器运行时。\n更信息的部署架构可参考官方文档。\n准备虚拟机节点 这里我们将部署 3 + 3 的集群，需要6台虚拟机，基本配置如下\n主机名 IP vCPU 内存 homek3s-server1 192.168.0.150 1 2 GB homek3s-server2 192.168.0.151 1 2 GB homek3s-server3 192.168.0.152 1 2 GB homek3s-agent1 192.168.0.154 2 4 GB homek3s-agent2 192.168.0.155 2 4 GB homek3s-agent3 192.168.0.156 2 4 GB 部署的最小需求，可参考官方文档。\nK3s 支持大部分主流的Linux操作系统，这里我使用的是 openSUSE Leap Micro 15.","tags":["Container","Kubernetes"],"title":"轻量级Kubernetes集群-K3S"},{"categories":null,"contents":"这是一个示例帖子，旨在测试以下内容：\n不同的帖子作者。 目录 降价内容渲染。 数学渲染。 表情符号渲染。 Markdown语法渲染 标题 The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nMarkdown Syntax Rendering Headings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Inline Markdown In Table italics bold strikethrough code Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nMath Rendering Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\nEmoji Rendering 🙈 🙈 🙉 🙉 🙊 🙊\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"June 8, 2020","hero":"/zh/posts/markdown-sample/hero.svg","permalink":"/zh/posts/markdown-sample/","summary":"这是一个示例帖子，旨在测试以下内容：\n不同的帖子作者。 目录 降价内容渲染。 数学渲染。 表情符号渲染。 Markdown语法渲染 标题 The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nMarkdown Syntax Rendering Headings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo.","tags":null,"title":"Markdown示例"},{"categories":null,"contents":"这是一个示例帖子，旨在测试以下内容：\n默认英雄形象。 不同的短代码。 告警 该主题可用以下告警。\n这是 type=\u0026quot;success\u0026quot; 的告警。 这是 type=\u0026quot;danger\u0026quot; 的告警。 这是 type=\u0026quot;warning\u0026quot; 的告警。 这是 type=\u0026quot;info\u0026quot; 的告警。 这是 type=\u0026quot;dark\u0026quot; 的告警。 这是 type=\u0026quot;primary\u0026quot; 的告警。 这是 type=\u0026quot;secondary\u0026quot; 的告警。 图像 没有任何属性的示例图像 {{\u0026lt; img src=\u0026quot;/posts/shortcodes/boat.jpg\u0026quot; title=\u0026ldquo;海上的一艘船\u0026rdquo; \u0026gt;}}\n设置高宽属性的示例图像 {{\u0026lt; img src=\u0026quot;/posts/shortcodes/boat.jpg\u0026quot; height=\u0026ldquo;400\u0026rdquo; width=\u0026ldquo;600\u0026rdquo; title=\u0026ldquo;海上的一艘船\u0026rdquo; \u0026gt;}} 设置高宽属性中间对齐的图像 {{\u0026lt; img src=\u0026quot;/posts/shortcodes/boat.jpg\u0026quot; height=\u0026ldquo;400\u0026rdquo; width=\u0026ldquo;600\u0026rdquo; align=\u0026ldquo;center\u0026rdquo; title=\u0026ldquo;海上的一艘船\u0026rdquo; \u0026gt;}} 带有float属性的图像 {{\u0026lt; img src=\u0026quot;/posts/shortcodes/boat.jpg\u0026quot; height=\u0026ldquo;200\u0026rdquo; width=\u0026ldquo;500\u0026rdquo; float=\u0026ldquo;right\u0026rdquo; title=\u0026ldquo;海上的一艘船\u0026rdquo; \u0026gt;}}\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies. Praesent tellus risus, eleifend vel efficitur ac, venenatis sit amet sem. Ut ut egestas erat. Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat. Suspendisse nec ipsum eu erat finibus dictum. Morbi volutpat nulla purus, vel maximus ex molestie id. Nullam posuere est urna, at fringilla eros venenatis quis.\nFusce vulputate dolor augue, ut porta sapien fringilla nec. Vivamus commodo erat felis, a sodales lectus finibus nec. In a pulvinar orci. Maecenas suscipit eget lorem non pretium. Nulla aliquam a augue nec blandit. Curabitur ac urna iaculis, ornare ligula nec, placerat nulla. Maecenas aliquam nisi vitae tempus vulputate.\n分列 此主题支持根据需要将页面拆分为任意数量的列。\n两列 {{\u0026lt;split 6 6\u0026gt;}} -\u0026ndash; {{\u0026lt; /split \u0026gt;}}\n左边列 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies. 右边列 Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat. 三列 {{\u0026lt; split 4 4 4 \u0026gt;}} \u0026mdash; \u0026mdash; {{\u0026lt; /split \u0026gt;}}\n左边列 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies. 中间列 Aenean dignissim dictum ex. Donec a nunc vel nibh placerat interdum. 右边列 Fusce ut leo turpis. Morbi consectetur sed lacus vitae vehicula. Cras gravida turpis id eleifend volutpat. 垂直空间 两行之间的垂直空间。\n{{\u0026lt; vs 4\u0026gt;}}\n第一行。 这是第二行。与上一行将有4rem的垂直空间。\n视频 {{\u0026lt; video src=\u0026quot;/videos/sample.mp4\u0026quot; \u0026gt;}}\nVideo by Rahul Sharma from Pexels.\nMermaid 这里是一些使用mermaid短代码的示例。\n图形:\n\\{\\{\u0026lt; mermaid align=\u0026#34;left\u0026#34; \u0026gt;}} graph LR; A[Hard edge] --\u0026gt;|Link text| B(Round edge) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result one] C --\u0026gt;|Two| E[Result two] \\{\\{\u0026lt; /mermaid \u0026gt;}} graph LR; A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] 序列图:\n\\{\\{\u0026lt; mermaid \u0026gt;}} sequenceDiagram participant Alice participant Bob Alice-\u0026gt;\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail! John--\u0026gt;\u0026gt;Alice: Great! John-\u0026gt;\u0026gt;Bob: How about you? Bob--\u0026gt;\u0026gt;John: Jolly good! \\{\\{\u0026lt; /mermaid \u0026gt;}} sequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughts prevail! John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good! 甘特图:\n\\{\\{\u0026lt; mermaid \u0026gt;}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d \\{\\{\u0026lt; /mermaid \u0026gt;}} gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid excludes weekdays 2014-01-10 section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d 类图:\n\\{\\{\u0026lt; mermaid \u0026gt;}} classDiagram Class01 \u0026lt;|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u0026lt;--\u0026gt; C2: Cool label \\{\\{\u0026lt; /mermaid \u0026gt;}} classDiagram Class01 \u003c|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --\u003e C2 : Where am i? Class09 --* C3 Class09 --|\u003e Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 \u003c--\u003e C2: Cool label Git图:\n\\{\\{\u0026lt; mermaid background=\u0026#34;black\u0026#34; align=\u0026#34;right\u0026#34; \u0026gt;}} gitGraph: options { \u0026#34;nodeSpacing\u0026#34;: 150, \u0026#34;nodeRadius\u0026#34;: 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch \\{\\{\u0026lt; /mermaid \u0026gt;}} gitGraph: options { \"nodeSpacing\": 150, \"nodeRadius\": 10 } end commit branch newbranch checkout newbranch commit commit checkout master commit commit merge newbranch ER图:\n\\{\\{\u0026lt; mermaid \u0026gt;}} erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses \\{\\{\u0026lt; /mermaid \u0026gt;}} erDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses Gist {{\u0026lt; gist hossainemruz 4ad86c9b6378677e14eff12713e75e44 \u0026gt;}}\n","date":"June 8, 2020","hero":"/zh/posts/shortcodes/boat.jpg","permalink":"/zh/posts/shortcodes/","summary":"这是一个示例帖子，旨在测试以下内容：\n默认英雄形象。 不同的短代码。 告警 该主题可用以下告警。\n这是 type=\u0026quot;success\u0026quot; 的告警。 这是 type=\u0026quot;danger\u0026quot; 的告警。 这是 type=\u0026quot;warning\u0026quot; 的告警。 这是 type=\u0026quot;info\u0026quot; 的告警。 这是 type=\u0026quot;dark\u0026quot; 的告警。 这是 type=\u0026quot;primary\u0026quot; 的告警。 这是 type=\u0026quot;secondary\u0026quot; 的告警。 图像 没有任何属性的示例图像 {{\u0026lt; img src=\u0026quot;/posts/shortcodes/boat.jpg\u0026quot; title=\u0026ldquo;海上的一艘船\u0026rdquo; \u0026gt;}}\n设置高宽属性的示例图像 {{\u0026lt; img src=\u0026quot;/posts/shortcodes/boat.jpg\u0026quot; height=\u0026ldquo;400\u0026rdquo; width=\u0026ldquo;600\u0026rdquo; title=\u0026ldquo;海上的一艘船\u0026rdquo; \u0026gt;}} 设置高宽属性中间对齐的图像 {{\u0026lt; img src=\u0026quot;/posts/shortcodes/boat.jpg\u0026quot; height=\u0026ldquo;400\u0026rdquo; width=\u0026ldquo;600\u0026rdquo; align=\u0026ldquo;center\u0026rdquo; title=\u0026ldquo;海上的一艘船\u0026rdquo; \u0026gt;}} 带有float属性的图像 {{\u0026lt; img src=\u0026quot;/posts/shortcodes/boat.jpg\u0026quot; height=\u0026ldquo;200\u0026rdquo; width=\u0026ldquo;500\u0026rdquo; float=\u0026ldquo;right\u0026rdquo; title=\u0026ldquo;海上的一艘船\u0026rdquo; \u0026gt;}}\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Cras egestas lectus sed leo ultricies ultricies.","tags":null,"title":"短代码示例"}]